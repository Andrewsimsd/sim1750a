I have this function in C 
<function_to_test>
static int
ex_ab ()		/* 1[0-3]xy */
{
  ushort addr = BASEREG (opcode) + (opcode & 0xFF);
  short help;

  GET (DATA, addr, &help);
  arith (ARI_ADD, VAR_INT, &simreg.r[2], &help);

  simreg.ic++;
  return (nc_AB);
}
</function_to_test>
I have a rust function that calls the previous function through an FFI. Write me unit tests in rust to exhaustively exercise all code paths of the C function.  Include messages when tests fail in the assert. Use the term idempotency to describe determinism over repeated calls. Include tests for edge cases and idempotency. Be very thorough as a very experienced, professional software engineer would be. Consider your response before responding. Consider that the registers used for this test may not be used the same in future tests. Because of this, make all helper functions that you generate flexible. I have the following helper functions that can and should be used to help arrange the tests where applicable:
<rust_helper_functions>
pub fn make_opcode(base_selector: u8, offset: u8) -> u16 {
    let base_bits = (base_selector as u16) << 8; // bits 8â€“9
    base_bits | offset as u16
}

fn expected_base_index(opcode: u16) -> usize {
    ((opcode & 0x0300) >> 8) as usize
}

pub fn expected_addr(opcode: u16) -> u16 {
    unsafe{
        let base_idx = expected_base_index(opcode);
        c_types::simreg.r[base_idx].wrapping_add((opcode & 0xFF) as i16) as u16
    }
}
/// This function sets memory to a specified value on the given page and adress. 
pub unsafe fn set_memory_value(page: u16, addres: u16, value: u16){
    c_types::memoryBank.memPage[page as usize].memData[address as usize] = value;
    c_types::memoryBank.memPage[page as usize].wasWritten[address as usize] = 1;
}
</rust_helper_functions>
The following are some things defined in the C code that might be relevant:
<C_definitions>
#define BASEREG(opcode) (ushort) simreg.r[12 + (((opcode) & 0x0300) >> 8)]
</C_definitions>
the simreg object in C is defined as follows:
<simreg_definition>
struct simreg
  {
    short  r[16];  /* 0..15 */
    ushort pir;    /* 16 */
    ushort mk;     /* 17 */
    ushort ft;     /* 18 */
    ushort ic;     /* 19 */
    ushort sw;     /* 20 */
    ushort ta;     /* 21 */
    ushort tb;     /* 22 */
    ushort go;     /* not a real register but handled like TA/TB */
    ushort sys;    /* system configuration register */
  };
</simreg_definition>

